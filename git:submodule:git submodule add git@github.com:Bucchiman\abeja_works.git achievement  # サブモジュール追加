Command> git submodule add

Arguments> [repo url] [submodule name]

TL;DR> サブモジュール追加

Keywords> git
        > submodule

Description>
           > 外部のgitリポジトリを自分のgitリポジトリのサブディレクトリとして登録し、特定のcommitを参照する仕組み
           >
           > 0.
           >    $ tree myprojects
           >    > myprojects/
           >    >      |----- .git/
           >    >      +----- hello.c
           >
           > 1. サブモジュール追加
           >    $ pwd
           >    > /path/to/myprojects
           >    $ git submodule add https://github.com/Bucchiman/submodule.git submodule
           >    > myprojects/
           >    >      |----- .git/
           >    >      |----- hello.c
           >    >      +----- submodule/
           >    >                 |----- .git/
           >    >                 +----- 8ucchiman.cpp
           >
           > 2. 親リポジトリで状態を確認
           >    $ git status
           >    > On branch master
           >    > Changes to be committed:
           >    > (use "git restore --staged <file>..." to unstage)
           >    > new file:   .gitmodules    # .gitmodules作成
           >    > new file:   submodule
           >
           >    $ git diff --cached       # インデックス状態とHEAD状態の差分
           >    > diff --git a/.gitmodules b/.gitmodules
           >      new file mode 100644
           >      index 0000000..2fdbccb
           >      --- /dev/null
           >      +++ b/.gitmodules
           >      @@ -0,0 +1,3 @@
           >      +[submodule "submodule"]      # submodule登録
           >      +       path = submodule
           >      +       url = https://github.com/Bucchiman/submodule.git
           >      diff --git a/submodule b/submodule
           >      new file mode 160000
           >      index 0000000..bb33b4b
           >      --- /dev/null
           >      +++ b/submodule
           >      @@ -0,0 +1 @@
           >      +Subproject commit bb33b4bb8fe0d9ce52e6e2753a514700ce58f1bc   # commit hash
           >
           > 3. サブモジュールの更新
           >    $ cd submodule
           >    $ git checkout ^HEAD    # 一つ前の状態にチェックアウト
           >    $ cd ..
           >    $ git status
           >    > Changes not staged for commit:
           >    >   (use "git add <file>..." to update what will be committed)
           >    >   (use "git checkout -- <file>..." to discard changes in working directory)
           >    >   
           >    >   	modified:   bootstrap (new commits)      # 変更
           >    >   
           >    > no changes added to commit (use "git add" and/or "git commit -a")
           >
           >    $ git diff
           >    > diff --git a/bootstrap b/bootstrap
           >    > index 5c02844..88697c0 160000
           >    > --- a/bootstrap
           >    > +++ b/bootstrap
           >    > @@ -1 +1 @@
           >    > -Subproject commit 5c028448c1fc171cf4a0fd99d3a672b649bef2aa
           >    > +Subproject commit 88697c03a9315b5f1944fc82534a824aafebda0e    5c02844 -> 88697
           >
           >    $ git add submodule/
           >    $ git commit -m "update submodule: submodule"
           >
           > 4. リポジトリAで別のコミットをチェックアウト (重要)
           >    submoduleの理解しづらい点は、親リポジトリと子リポジトリのコミットハッシュIDが連動しないことである
           >    $ git checkout ^HEAD
           >    $ git status
           >    > HEAD detached at 45db3c1
           >    > Changes not staged for commit:
           >    >   (use "git add <file>..." to update what will be committed)
           >    >   (use "git checkout -- <file>..." to discard changes in working directory)
           >    > 
           >    > 	modified:   bootstrap (new commits)     # サブモジュールのコミットハッシュが連動しない
           >    > 
           >    > no changes added to commit (use "git add" and/or "git commit -a")
           >    $ git submodule update
           >    $ git status



Reference> https://qiita.com/sotarok/items/0d525e568a6088f6f6bb
         > https://maku77.github.io/p/dsctaq7/
