Command> ar rvs

Arguments> [static file]
         > [object file]

TL;DR> オブジェクトファイルから静的ライブラリの作成

Keywords> compile
        > static

Description>
           > - 静的ライブラリ: libxxx.a
           >
           > オブジェクトファイルから静的ライブラリを作成
           > 最終的にmain.cppをコンパイルする際、静的ライブラリとリンクし実行ファイルを作成
           > 
           > e.g.
           > g++ -c hello.cpp good_morning.cpp    # オブジェクトファイルの作成
           > ar rvs libgreetings.a hello.o good_morning.o   # 静的ライブラリの作成
           > g++ main.cpp libgreetings.a          # main.cppをコンパイルしてlibgreetings.aとリンクし実行ファイルを作成
           >
           > 静的ライブラリとはリンク時に実行ファイルに結合されるライブラリ
           > つまり実行ファイルに静的ライブラリが含まれる
           >
           > 静的ライブラリのリンクの方法(すべて同じ結果)
           >    - gcc main.c libfunc.a -o main
           >    - gcc main.o libfunc.a -o main
           >    - gcc main.c -lfunc -L . -o main
           > 一番最後のコマンドは
           >    -lfunc -> libfunc.a
           >    -L     -> 指定したライブラリが存在するディレクトリ
           >
           > 静的ライブラリのメリット
           > - easy run
           >     リンク時に実行ファイルに必要な機能が組み込まれるため実行ファイルのみで実行ができる
           >
           > - speed
           >
           > ################################################################################
           > # arの使い方
           > - rオプション
           >   操作コードrを用いると指定したアーカイブファイルにメンバを追加できる。アーカイブファイルが存在しない場合、作成
           >   $ ls
           >    > hoge.o geho.o 8ucchiman.o
           >   $ ar r archive.a *.o
           >   $ ls
           >    > archive.a hoge.o geho.o 8ucchiman.o
           >
           > - tオプション
           >   アーカイブファイルの中のオブジェクトファイル表示
           >   $ ar t archive.a
           >    > hoge.o geho.o 8ucchiman.o
           >
           > - dオプション
           >   操作コードdを用いると指定したアーカイブファイルからメンバを削除できる。
           >   $ ar t archive.a
           >    > hoge.o geho.o 8ucchiman.o
           >   $ ar d archive.a 8ucchiman.o
           >   $ ar t archive.a
           >    > hoge.o geho.o
           >
           > - pオプション
           >   操作コードpを用いるとアーカイブ内のメンバを標準出力できる。
           >   $ ar t archive.a
           >    > hoge.o geho.o
           >   $ ar p archive.a hoge.o
           >    > hoge.o content
           >   $ ar p archive.a
           >    > hoge.o content
           >      geho.o content
           >
           > - s
           >   Write an object-file index into the archive, o update an existing one
           >
           >
           >
           > その後、静的ライブラリをリンクする
           > $ gcc a.c b.c -L. -lsample -o main
           >        -L: 静的ライブラリが存在する場所
           >        -l: 静的ライブラリ名
           >
           > ------------------------------------------------------------------------
           > https://qiita.com/developer-kikikaikai/items/c66a0cdae974cf446e24
           > - static library(.a)
           >        - コンパイル時にプログラムが内部にそのまま取り込んでしまう形式
           >        - サイズが大きくなる
           >
           > - share library(.so)
           > https://qiita.com/developer-kikikaikai/items/f6f87b2d1d7c3e14fb52#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AAlinux%E3%81%AE%E5%8B%95%E7%9A%84%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E4%BB%95%E7%B5%84%E3%81%BF
           >        - 
           >

Example01> g++ -c hello.cpp good_morning.cpp    # オブジェクトファイルの作成
Example02> ar rvs libgreetings.a hello.o good_morning.o   # 静的ライブラリの作成
Example03> g++ main.cpp libgreetings.a          # main.cppをコンパイルしてlibgreetings.aとリンクし実行ファイルを作成

Reference> qiita.com/shohirose/items/45fb49c6b429e8b204ac
         > https://daeudaeu.com/library/
         > https://linuxcommand.net/ar/
         > https://blog.amedama.jp/entry/2016/05/29/222739
         > https://qiita.com/seriru13/items/c2f5192615162c4c3f47
